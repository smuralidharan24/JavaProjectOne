package com.crm.qa.ExtendReportListener;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentReportNG implements IReporter {
	public ExtentHtmlReporter htmlReporter;
	private ExtentReports extent;

	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {

		// specify location of the report
		// htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") +
		// "/test-output/myReport.html");
		htmlReporter = new ExtentHtmlReporter(outputDirectory + File.separator + "ExtentReport.html");
		htmlReporter.config().setDocumentTitle("Automation Report"); // Tile of report
		htmlReporter.config().setReportName("Free CRM Testing"); // Name of the report
		// htmlReporter.config().setTheme(Theme.DARK);
		htmlReporter.config().setTheme(Theme.STANDARD);

		// extent = new ExtentReports(outputDirectory + File.separator + "Extent.html",
		// true);
		extent = new ExtentReports();
		extent.attachReporter(htmlReporter);
		extent.setReportUsesManualConfiguration(true);

		// Passing General information
		String javaVersion = System.getProperty("java.version");
		String osName = System.getProperty("os.name");
		String osArch = System.getProperty("os.arch");
		String osVersion = System.getProperty("os.version");
		String userName = System.getProperty("user.name");
		

		extent.setSystemInfo("Java Version", javaVersion);
				extent.setSystemInfo("Hostname", "localhost");
			extent.setSystemInfo("OS Name", osName);
		extent.setSystemInfo("User", osArch);
		extent.setSystemInfo("User", osVersion);
		extent.setSystemInfo("Environemnt", "QA");
		extent.setSystemInfo("User", userName);

		for (ISuite suite : suites) {
			Map<String, ISuiteResult> result = suite.getResults();

			for (ISuiteResult r : result.values()) {
				ITestContext context = r.getTestContext();

				buildTestNodes(context.getPassedTests(), Status.PASS);
				buildTestNodes(context.getFailedTests(), Status.FAIL);
				buildTestNodes(context.getSkippedTests(), Status.SKIP);
			}
		}

		extent.flush();
		htmlReporter.stop();

	}

	private void buildTestNodes(IResultMap tests, Status status) {
		ExtentTest test;

		if (tests.size() > 0) {
			for (ITestResult result : tests.getAllResults()) {
				// test = extent.startTest(result.getMethod().getMethodName());
				test = extent.createTest(result.getMethod().getMethodName());

				// test.setStartedTime(getTime(result.getStartMillis()));
				// test.setEndedTime(getTime(result.getEndMillis()));

				test.getModel().setStartTime(getTime(result.getStartMillis()));
				test.getModel().setStartTime(getTime(result.));
				test.getModel().setEndTime(getTime(result.getEndMillis()));

				for (String group : result.getMethod().getGroups()) {
					test.assignCategory(group);
				}

				if (result.getThrowable() != null) {
					test.log(status, result.getThrowable());
				} else {
					test.log(status, "Test " + status.toString().toLowerCase() + "ed");
				}

				// extent.endTest(test);
				extent.flush();
			}
		}
	}

	private Date getTime(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.getTime();
	}

}
