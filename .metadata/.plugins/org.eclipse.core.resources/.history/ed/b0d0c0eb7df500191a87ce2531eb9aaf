package com.crm.qa.ExtendReportListener;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.tools.ant.util.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class ExtentReportNG2 implements IReporter {
	public ExtentHtmlReporter htmlReporter;
	private ExtentReports extent;

	public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {

		// specify location of the report
		// htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") +
		// "/test-output/myReport.html");
		htmlReporter = new ExtentHtmlReporter(outputDirectory + File.separator + "ExtentReport.html");
		htmlReporter.config().setDocumentTitle("Automation Report"); // Tile of report
		htmlReporter.config().setReportName("Free CRM Testing"); // Name of the report
		// htmlReporter.config().setTheme(Theme.DARK);
		htmlReporter.config().setTheme(Theme.STANDARD);

		// extent = new ExtentReports(outputDirectory + File.separator + "Extent.html",
		// true);
		extent = new ExtentReports();
		extent.attachReporter(htmlReporter);
		extent.setReportUsesManualConfiguration(true);

		// Passing General information
		String javaVersion = System.getProperty("java.version");
		String osName = System.getProperty("os.name");
		String osArch = System.getProperty("os.arch");
		String osVersion = System.getProperty("os.version");
		String userName = System.getProperty("user.name");

		extent.setSystemInfo("Java Version", javaVersion);
		extent.setSystemInfo("Hostname", "localhost");
		extent.setSystemInfo("OS Name", osName);
		extent.setSystemInfo("OS Arch", osArch);
		extent.setSystemInfo("OS Version", osVersion);
		extent.setSystemInfo("Environemnt", "QA");
		extent.setSystemInfo("User", userName);

		for (ISuite suite : suites) {
			Map<String, ISuiteResult> result = suite.getResults();

			for (ISuiteResult r : result.values()) {
				ITestContext context = r.getTestContext();

				try {
					buildTestNodes(context.getPassedTests(), Status.PASS);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					buildTestNodes(context.getFailedTests(), Status.FAIL);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					buildTestNodes(context.getSkippedTests(), Status.SKIP);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		extent.flush();
		htmlReporter.stop();

	}

	private void buildTestNodes(IResultMap tests, Status status) throws IOException {
		ExtentTest test;

		if (tests.size() > 0) {
			for (ITestResult result : tests.getAllResults()) {

				test = extent.createTest(result.getMethod().getMethodName());
				test.getModel().setStartTime(getTime(result.getStartMillis()));
				test.getModel().setEndTime(getTime(result.getEndMillis()));

				for (String group : result.getMethod().getGroups()) {
					test.assignCategory(group);

				}

				/*
				 * if (result.getThrowable() != null) { test.log(status, result.getThrowable());
				 * } else
				 */

				if (result.getStatus() == ITestResult.FAILURE) {
					test.log(Status.FAIL, "TEST CASE FAILED IS " + result.getName()); // to add name in extent report
					test.log(Status.FAIL, "TEST CASE FAILED IS " + result.getThrowable()); // to add error/exception in
																							// extent
																							// report
					String screenshotPath = ExtentReportNG2.getScreenshot(test, result.getName());
					test.addScreenCaptureFromPath(screenshotPath);// adding screen shot
				} else if (result.getStatus() == ITestResult.SKIP) {
					test.log(Status.SKIP, "Test Case SKIPPED IS " + result.getName());
				} else if (result.getStatus() == ITestResult.SUCCESS) {
					test.log(Status.PASS, "Test Case PASSED IS " + result.getName());
				}

				// extent.endTest(test);
				extent.flush();
			}
		}
	}

	private Date getTime(long millis) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeInMillis(millis);
		return calendar.getTime();
	}

	public static String getScreenshot(ExtentTest test, String screenshotName) throws IOException {
		String dateName = new SimpleDateFormat("yyyyMMddhhmmss.n").format(new Date());
		TakesScreenshot ts = (TakesScreenshot) test;
		File source = ts.getScreenshotAs(OutputType.FILE);

		// after execution, you could see a folder "FailedTestsScreenshots" under src
		// folder
		String destination = System.getProperty("user.dir") + "/Screenshots/" + screenshotName + dateName + ".png";
		File finalDestination = new File(destination);
		FileUtils.getFileUtils().copyFile(source, finalDestination);
		return destination;
	}
}
